import asyncio
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-miniapp.vercel.app")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Inline buttons
def get_main_menu():
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", web_app={'url': f"{WEBAPP_URL}?tab=donate"}),
            InlineKeyboardButton("ü§≤ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", web_app={'url': f"{WEBAPP_URL}?tab=support"})
        ],
        [
            InlineKeyboardButton("üéØ –¶–µ–ª–µ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", web_app={'url': f"{WEBAPP_URL}?tab=campaigns"}),
            InlineKeyboardButton("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", web_app={'url': f"{WEBAPP_URL}?tab=subscription"})
        ],
        [
            InlineKeyboardButton("üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫—è—Ç–∞", web_app={'url': f"{WEBAPP_URL}?tab=zakat"}),
            InlineKeyboardButton("üèõÔ∏è –§–æ–Ω–¥—ã", web_app={'url': f"{WEBAPP_URL}?tab=funds"})
        ],
        [
            InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è", web_app={'url': f"{WEBAPP_URL}?tab=history"})
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /start command"""
    await update.message.reply_text(
        "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–¥–∞–∫–∞-–ü–∞—Å—Å ‚Äî –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

async def sadaqa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /sadaqa command"""
    keyboard = [[InlineKeyboardButton("üíµ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–Ω–∞—Ç—ã", web_app={'url': f"{WEBAPP_URL}?tab=donate"})]]
    await update.message.reply_text(
        "–ü–æ–∂–µ—Ä—Ç–≤—É–π—Ç–µ –Ω–∞ –±–ª–∞–≥–æ–µ –¥–µ–ª–æ üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /support command"""
    keyboard = [
        [
            InlineKeyboardButton("500 ‚ÇΩ", callback_data="donate:sum=500"),
            InlineKeyboardButton("1000 ‚ÇΩ", callback_data="donate:sum=1000"),
            InlineKeyboardButton("2500 ‚ÇΩ", callback_data="donate:sum=2500")
        ],
        [InlineKeyboardButton("üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", web_app={'url': f"{WEBAPP_URL}?tab=support"})]
    ]
    await update.message.reply_text(
        "–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def zakat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /zakat command"""
    keyboard = [[InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫—è—Ç–∞", web_app={'url': f"{WEBAPP_URL}?tab=zakat"})]]
    await update.message.reply_text(
        "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≤–∞—à –∑–∞–∫—è—Ç üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def campaigns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /campaigns command"""
    keyboard = [[InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏", web_app={'url': f"{WEBAPP_URL}?tab=campaigns"})]]
    await update.message.reply_text(
        "–¶–µ–ª–µ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def partners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /partners command"""
    keyboard = [[InlineKeyboardButton("üèõÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ñ–æ–Ω–¥–æ–≤", web_app={'url': f"{WEBAPP_URL}?tab=funds"})]]
    await update.message.reply_text(
        "–§–æ–Ω–¥—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("donate:sum="):
        amount = data.split("sum=")[1]
        await query.edit_message_text(
            f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount} ‚ÇΩ\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã üëá",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", web_app={'url': f"{WEBAPP_URL}?donate={amount}"})
            ]])
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """Log the error and send a message to the user"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    """Start the bot"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sadaqa", sadaqa))
    application.add_handler(CommandHandler("support", support))
    application.add_handler(CommandHandler("zakat", zakat))
    application.add_handler(CommandHandler("campaigns", campaigns))
    application.add_handler(CommandHandler("partners", partners))
    
    # Callback query handler
    application.add_handler(CallbackQueryHandler(button))
    
    # Error handler
    application.add_error_handler(error_handler)
    
    # Start the bot
    logger.info("Bot started!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

